<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for?(:title) ? yield(:title) + " | MemoApp" : "MemoApp - 簡単メモ管理" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="description" content="<%= content_for?(:description) ? yield(:description) : "効率的なメモ管理ができるWebアプリケーション。タグ付け、検索、共有機能付き。" %>">
    <meta name="keywords" content="メモ, ノート, タグ, 検索, 共有, 管理, アプリ">
    <meta name="author" content="MemoApp">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="<%= request.original_url %>">
    <meta property="og:title" content="<%= content_for?(:title) ? yield(:title) + " | MemoApp" : "MemoApp - 簡単メモ管理" %>">
    <meta property="og:description" content="<%= content_for?(:description) ? yield(:description) : "効率的なメモ管理ができるWebアプリケーション。タグ付け、検索、共有機能付き。" %>">
    <meta property="og:image" content="<%= request.base_url %>/apple-touch-icon.png">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="<%= request.original_url %>">
    <meta property="twitter:title" content="<%= content_for?(:title) ? yield(:title) + " | MemoApp" : "MemoApp - 簡単メモ管理" %>">
    <meta property="twitter:description" content="<%= content_for?(:description) ? yield(:description) : "効率的なメモ管理ができるWebアプリケーション。タグ付け、検索、共有機能付き。" %>">
    <meta property="twitter:image" content="<%= request.base_url %>/apple-touch-icon.png">
    
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "shadcn_design", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "memo_app_shadcn", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
  </head>

  <body class="<%= controller_name %>-<%= action_name %>-page font-<%= current_user&.font_size || 'medium' %>" 
        data-theme="<%= current_user&.theme || 'light' %>"
        data-shortcuts-enabled="<%= current_user&.keyboard_shortcuts_enabled != false %>">
    
    <!-- ハンバーガーメニューボタン -->
    <% unless controller_name == 'sessions' || controller_name == 'users' || controller_name == 'errors' %>
      <button class="hamburger-btn" id="hamburger-btn" aria-label="メニューを開く">
        <i data-lucide="menu" class="hamburger-icon"></i>
      </button>
    <% end %>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    
    <!-- 右スライドサイドバー -->
    <% unless controller_name == 'sessions' || controller_name == 'users' || controller_name == 'errors' %>
      <div class="slide-sidebar" id="slide-sidebar">
        <div class="sidebar-header">
          <h2 class="sidebar-title">MemoApp</h2>
        </div>
        
        <div class="sidebar-content">
          <% if current_user %>
            <!-- ユーザー情報 -->
            <div class="sidebar-user-info">
              <div class="user-avatar-large">
                <%= current_user.name.first %>
              </div>
              <div class="user-details">
                <div class="user-name"><%= current_user.name %></div>
                <div class="user-email"><%= current_user.email if current_user.respond_to?(:email) %></div>
              </div>
            </div>
            
            <!-- メニュー項目 -->
            <nav class="sidebar-nav">
              <button class="sidebar-nav-item" id="settings-btn">
                <i data-lucide="settings" class="nav-icon"></i>
                <span>設定</span>
              </button>
              
              <div class="sidebar-nav-item">
                <i data-lucide="user" class="nav-icon"></i>
                <span>プロフィール</span>
              </div>
              
              <div class="sidebar-nav-item">
                <i data-lucide="help-circle" class="nav-icon"></i>
                <span>ヘルプ</span>
              </div>
              
              <div class="nav-separator"></div>
              
              <%= link_to destroy_sessions_path, 
                  class: "sidebar-nav-item nav-item-danger", 
                  data: { turbo_method: :delete } do %>
                <i data-lucide="log-out" class="nav-icon"></i>
                <span>ログアウト</span>
              <% end %>
            </nav>
          <% end %>
        </div>
      </div>
    <% end %>
    
    <!-- 設定ポップアップ -->
    <div class="settings-popup-overlay" id="settings-popup-overlay">
      <div class="settings-popup" id="settings-popup">
        <div class="settings-popup-header">
          <h2 class="popup-title">設定</h2>
          <button class="popup-close-btn" id="settings-close-btn" aria-label="設定を閉じる">
            <i data-lucide="x" class="close-icon"></i>
          </button>
        </div>
        
        <div class="settings-popup-content">
          <%= form_with model: current_user || User.new, url: settings_path, method: :patch, 
                        local: false, 
                        id: "settings-popup-form",
                        data: { turbo: false } do |form| %>
            
            <!-- 色設定 -->
            <div class="popup-section">
              <h3 class="popup-section-title">
                <i data-lucide="palette" class="section-icon"></i>
                色設定
              </h3>
              
              <div class="theme-options-compact">
                <div class="theme-option-compact">
                  <%= form.radio_button :theme, "light", 
                                        id: "popup_theme_light", 
                                        checked: (current_user&.theme == "light") || (current_user&.theme.blank?),
                                        data: { setting_option: "theme" } %>
                  <label for="popup_theme_light" class="theme-label-compact">
                    <div class="theme-preview-mini theme-preview-light"></div>
                    <span>ライト</span>
                  </label>
                </div>
                
                <div class="theme-option-compact">
                  <%= form.radio_button :theme, "dark", 
                                        id: "popup_theme_dark", 
                                        checked: current_user&.theme == "dark",
                                        data: { setting_option: "theme" } %>
                  <label for="popup_theme_dark" class="theme-label-compact">
                    <div class="theme-preview-mini theme-preview-dark"></div>
                    <span>ダーク</span>
                  </label>
                </div>
                
                <div class="theme-option-compact">
                  <%= form.radio_button :theme, "high-contrast", 
                                        id: "popup_theme_high_contrast", 
                                        checked: current_user&.theme == "high-contrast",
                                        data: { setting_option: "theme" } %>
                  <label for="popup_theme_high_contrast" class="theme-label-compact">
                    <div class="theme-preview-mini theme-preview-high-contrast"></div>
                    <span>高コントラスト</span>
                  </label>
                </div>
              </div>
            </div>
            
            <!-- 文字サイズ設定 -->
            <div class="popup-section">
              <h3 class="popup-section-title">
                <i data-lucide="type" class="section-icon"></i>
                文字サイズ
              </h3>
              
              <div class="font-size-options-compact">
                <div class="font-size-option-compact">
                  <%= form.radio_button :font_size, "small", 
                                        id: "popup_font_size_small", 
                                        checked: current_user&.font_size == "small",
                                        data: { setting_option: "font_size" } %>
                  <label for="popup_font_size_small" class="font-size-label-compact">小</label>
                </div>
                
                <div class="font-size-option-compact">
                  <%= form.radio_button :font_size, "medium", 
                                        id: "popup_font_size_medium", 
                                        checked: (current_user&.font_size == "medium") || (current_user&.font_size.blank?),
                                        data: { setting_option: "font_size" } %>
                  <label for="popup_font_size_medium" class="font-size-label-compact">標準</label>
                </div>
                
                <div class="font-size-option-compact">
                  <%= form.radio_button :font_size, "large", 
                                        id: "popup_font_size_large", 
                                        checked: current_user&.font_size == "large",
                                        data: { setting_option: "font_size" } %>
                  <label for="popup_font_size_large" class="font-size-label-compact">大</label>
                </div>
                
                <div class="font-size-option-compact">
                  <%= form.radio_button :font_size, "x-large", 
                                        id: "popup_font_size_x_large", 
                                        checked: current_user&.font_size == "x-large",
                                        data: { setting_option: "font_size" } %>
                  <label for="popup_font_size_x_large" class="font-size-label-compact">特大</label>
                </div>
              </div>
            </div>
            
            <!-- キーボードショートカット設定 -->
            <div class="popup-section">
              <h3 class="popup-section-title">
                <i data-lucide="keyboard" class="section-icon"></i>
                キーボードショートカット
              </h3>
              
              <div class="toggle-setting-compact">
                <%= form.check_box :keyboard_shortcuts_enabled, 
                                   id: "popup_keyboard_shortcuts_enabled",
                                   checked: current_user&.keyboard_shortcuts_enabled != false,
                                   data: { setting_option: "keyboard_shortcuts" },
                                   class: "toggle-input" %>
                <label for="popup_keyboard_shortcuts_enabled" class="toggle-label-compact">
                  <span class="toggle-slider-compact"></span>
                  <span class="toggle-text">有効にする</span>
                </label>
              </div>
            </div>
            
          <% end %>
          
          <div class="popup-save-status" id="popup-save-status" role="status" aria-live="polite">
            <!-- 保存状態がここに表示される -->
          </div>
        </div>
      </div>
    </div>

    <div class="app-container-new">
      <div id="notice">
        <%= render "layouts/notice" %>
      </div>
      
      <main class="<%= controller_name == 'sessions' || controller_name == 'users' ? 'auth-main' : 'app-main-new' %>">
        <%= yield %>
      </main>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const hamburgerBtn = document.getElementById('hamburger-btn');
        const sidebarOverlay = document.getElementById('sidebar-overlay');
        const slideSidebar = document.getElementById('slide-sidebar');
        const settingsBtn = document.getElementById('settings-btn');
        const settingsPopupOverlay = document.getElementById('settings-popup-overlay');
        const settingsPopup = document.getElementById('settings-popup');
        const settingsCloseBtn = document.getElementById('settings-close-btn');
        const settingsForm = document.getElementById('settings-popup-form');
        const settingOptions = document.querySelectorAll('input[data-setting-option]');
        const popupSaveStatus = document.getElementById('popup-save-status');
        
        // スクロール位置を保存する変数
        let scrollPosition = 0;
        
        // スクロールを無効化（スクロールバーを維持）
        function disableScroll() {
          // 現在のスクロール位置を保存
          scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
          
          // bodyを固定位置にしてスクロールを無効化
          document.body.style.position = 'fixed';
          document.body.style.top = `-${scrollPosition}px`;
          document.body.style.width = '100%';
          document.body.style.overflowY = 'scroll'; // スクロールバーを強制表示
        }
        
        // スクロールを有効化
        function enableScroll() {
          // bodyの固定を解除
          document.body.style.position = '';
          document.body.style.top = '';
          document.body.style.width = '';
          document.body.style.overflowY = '';
          
          // 元のスクロール位置に戻す
          window.scrollTo(0, scrollPosition);
        }
        
        // サイドバーを開く
        function openSidebar() {
          sidebarOverlay.classList.add('active');
          slideSidebar.classList.add('active');
          disableScroll();
        }
        
        // サイドバーを閉じる
        function closeSidebar() {
          sidebarOverlay.classList.remove('active');
          slideSidebar.classList.remove('active');
          enableScroll();
        }
        
        // サイドバーの開閉を切り替える
        function toggleSidebar() {
          if (slideSidebar.classList.contains('active')) {
            closeSidebar();
          } else {
            openSidebar();
          }
        }
        
        // 設定ポップアップを開く
        function openSettingsPopup() {
          settingsPopupOverlay.classList.add('active');
          settingsPopup.classList.add('active');
          disableScroll();
        }
        
        // 設定ポップアップを閉じる
        function closeSettingsPopup() {
          settingsPopupOverlay.classList.remove('active');
          settingsPopup.classList.remove('active');
          enableScroll();
        }
        
        // イベントリスナー
        if (hamburgerBtn) {
          hamburgerBtn.addEventListener('click', toggleSidebar);
        }
        
        if (sidebarOverlay) {
          sidebarOverlay.addEventListener('click', closeSidebar);
        }
        
        if (settingsBtn) {
          settingsBtn.addEventListener('click', function() {
            // サイドバーを閉じる（スクロールは有効にしない）
            sidebarOverlay.classList.remove('active');
            slideSidebar.classList.remove('active');
            // 300ms後に設定ポップアップを開く（スクロールは無効のまま）
            setTimeout(openSettingsPopup, 300);
          });
        }
        
        if (settingsCloseBtn) {
          settingsCloseBtn.addEventListener('click', closeSettingsPopup);
        }
        
        if (settingsPopupOverlay) {
          settingsPopupOverlay.addEventListener('click', function(e) {
            if (e.target === settingsPopupOverlay) {
              closeSettingsPopup();
            }
          });
        }
        
        // 設定機能
        function applyTheme(theme) {
          document.body.setAttribute('data-theme', theme);
          if (theme === 'high-contrast') {
            document.body.classList.add('high-contrast-theme');
          } else {
            document.body.classList.remove('high-contrast-theme');
          }
        }
        
        function applyFontSize(size) {
          document.body.classList.remove('font-small', 'font-medium', 'font-large', 'font-x-large');
          if (size && size !== 'medium') {
            document.body.classList.add('font-' + size.replace('-', '-'));
          }
        }
        
        function applyKeyboardShortcuts(enabled) {
          document.body.setAttribute('data-shortcuts-enabled', enabled);
        }
        
        function showPopupSaveStatus(message, type = 'success') {
          popupSaveStatus.innerHTML = `
            <div class="popup-save-message popup-save-message-${type}">
              <i data-lucide="${type === 'success' ? 'check' : 'x'}" class="save-icon"></i>
              <span>${message}</span>
            </div>
          `;
          
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
          
          setTimeout(() => {
            popupSaveStatus.innerHTML = '';
          }, 3000);
        }
        
        // 設定変更をリアルタイムで保存
        settingOptions.forEach(option => {
          option.addEventListener('change', function() {
            const settingType = this.dataset.settingOption;
            let value;
            
            if (this.type === 'checkbox') {
              value = this.checked;
            } else if (this.checked) {
              value = this.value;
            } else {
              return;
            }
            
            // 即座に設定を適用
            switch (settingType) {
              case 'theme':
                if (this.checked) applyTheme(value);
                break;
              case 'font_size':
                if (this.checked) applyFontSize(value);
                break;
              case 'keyboard_shortcuts':
                applyKeyboardShortcuts(value);
                break;
            }
            
            // サーバーに保存
            if (settingsForm) {
              const formData = new FormData(settingsForm);
              
              fetch(settingsForm.action, {
                method: 'PATCH',
                body: formData,
                headers: {
                  'X-Requested-With': 'XMLHttpRequest',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                }
              })
              .then(response => response.json())
              .then(data => {
                if (data.status === 'success') {
                  showPopupSaveStatus(data.message, 'success');
                } else {
                  showPopupSaveStatus(data.message || '保存に失敗しました', 'error');
                }
              })
              .catch(error => {
                console.error('Error:', error);
                showPopupSaveStatus('保存に失敗しました', 'error');
              });
            }
          });
        });

        // 初期設定を適用
        const initialTheme = document.body.getAttribute('data-theme');
        if (initialTheme === 'high-contrast') {
          document.body.classList.add('high-contrast-theme');
        }
        
        // キーボードショートカットの初期設定
        const shortcutsEnabled = document.body.getAttribute('data-shortcuts-enabled') === 'true';
        
        // グローバルキーボードショートカット機能
        function handleGlobalKeyboardShortcuts(e) {
          if (!shortcutsEnabled) return;
          
          // Ctrl/Cmd + N: 新しいメモ
          if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            const createBtn = document.querySelector('.create-memo-btn');
            if (createBtn) createBtn.click();
          }
          
          // Ctrl/Cmd + S: 保存
          if ((e.ctrlKey || e.metaKey) && e.key === 's') {
            e.preventDefault();
            const saveBtn = document.querySelector('.save-btn, .form-actions .btn-primary');
            if (saveBtn) saveBtn.click();
          }
          
          // Ctrl/Cmd + F: 検索
          if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            e.preventDefault();
            const searchInput = document.querySelector('.search-input');
            if (searchInput) searchInput.focus();
          }
        }
        
        // グローバルキーボードショートカットを追加
        document.addEventListener('keydown', handleGlobalKeyboardShortcuts);

        // Initialize Lucide icons
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
      });
    </script>
  </body>
</html>
